## 软件架构风格 ##

 *  架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个构件有效的组织成一个完整的系统
 *  架构风格定义了用于描述系统的术语表和一组指导构建系统的规则

    | 五大架构风格  | 子风格               |
    | ------- | ----------------- |
    | 数据流风格   | 批处理、管道-过滤器        |
    | 调用/返回风格 | 主程序/子程序、面向对象、层次结构 |
    | 独立构件风格  | 进程通信、事件驱动系统（隐式调用） |
    | 虚拟机风格   | 解释器、规则系统          |
    | 仓库风格    | 数据库系统、黑板系统、超文本系统  |

#### 数据流风格 ####

![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489668606.jpg)
`前一步`的处理结果是`后一步`的输入内容【数据驱动】
![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489669238.jpg)

    | 优点                                                          | 缺点                                      | 实例           |
    | ----------------------------------------------------------- | --------------------------------------- | ------------ |
    | 1、松耦合【高内聚-低耦合】 2、良好的重用性、可维护性 3、可扩展性【标准接口适配】 4、良好的隐蔽性 5、支持并行 | 1、交互性较差 2、复杂性较高 3、性能较差（每个过滤器都需要解析和合成数据） | 传统编译器 网络报文处理 |

#### 调用/返回风格 ####

![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489669601.jpg)
这应该很好理解，程序里用的是最多的了。

子风格：
![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489670017.png)

特别讲解下子风格分层架构风格：![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489671177.jpg)

#### 独立构件风格 ####

独立构件风格包括：进程通信和事件系统风格

![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489671634.jpg)

    | 优点                       | 缺点                                                                                                       | 特点                                                      |
    | ------------------------ | -------------------------------------------------------------------------------------------------------- | ------------------------------------------------------- |
    | 1、松耦合 2、良好的重用性、可修改性和可扩展性 | 1、构件放弃了对系统计算的控制。一个构件触发一个事件时，不能确定其他构件是否会响应。即使知道了事件注册哪些构件，也不能保证这些过程被调用的顺序 2、数据交换的问题 3、过程的语义必须依赖被触发事件的上下文约束 | 系统由若干子系统构成且成为一个整体；系统由统一的目标；子系统有主从之分；每一个子系统有自己的事件收集和处理机制 |

#### 虚拟机风格 ####

![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489672034.jpg)
![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489672488.jpg)

#### 仓库风格 ####

比如数据库、数据中台等
![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489673137.jpg)

#### 其他 ####

##### 闭环控制风格 #####

![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489673436.jpg)

 *  适用于嵌入式系统，用于解决简单闭环控制问题
 *  经典应用：空调温控、定速巡航

##### C2风格 #####

![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489673809.jpg)
C2架构基本规则：

 *  构件和连接件都有一个顶部和一个底部
 *  构件的顶部要连接到连接件的底部，构件的底部要连接到连接件的顶部，构件之间不允许直连
 *  一个连接件可以喝任意数目的其他构件和连接件连接
 *  当两个连接件直接连接时，必须由其中一个的底部到另一个的顶部

## 软件架构复用 ##

软件架构复用包括机会复用和系统复用。

可复用的资产包括：需求、架构设计、元素、建模与分析、测试、项目规划、过程方法和工具、人员、样品系统、缺陷消除

一、软件架构复用的基本过程
包括3个阶段：构造/获取可复用的软件资产，其次管理这些资产，最后针对特定的需求，从这些资产中选择可复用的部分，以开发满足需求的应用系统

## 特定领域软件体系结构（DSSA） ##

DSSA的必备特征如下：

1.  一个严格定义的问题域和问题解域
2.  具有普遍性，使其可以用于领域中某个特定应用的开发
3.  对整个领域的构件组织模型的恰当抽象
4.  具备该领域固定的、电信的开发过程中可重用元素

从功能覆盖的范围角度：

1.  垂直域：定义一个特定的系统族，包含整个系统族内的多个系统，结果是在该领域中可作为系统的可行解决方案的一个通用软件体系结构
2.  水平域：定义了在多个系统和多个系统族中功能区域的共有部分，在子系统级上涵盖多个系统族的特定部分功能

一、DSSA基本活动

1.  领域分析：获得领域模型
2.  领域设计：获得DSSA
3.  领域实现：依据领域模型和DSSA开发和组织可重用信息

二、参与DSSA的人员
领域专家、领域分析人员、领域设计人员、领域实现人员

二、DSSA建立过程
建立过程分为5个阶段：

1.  定义领域范围
2.  定于领域特定的元素
3.  定义领域特定的设计和实现需求约束
4.  定义领域模型和体系结构
5.  产生、搜集可重用的产品单元

![笑小枫-www.xiaoxiaofeng.com](https://image.xiaoxiaofeng.site/spider/2023/12/25/xxf-1703489674205.png)

